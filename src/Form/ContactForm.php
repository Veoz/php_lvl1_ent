<?php

namespace Drupal\content_entity_example\Form;

use Drupal\Core\Ajax\RedirectCommand;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Language\Language;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Url;

/**
 * Form controller for the content_entity_example entity edit forms.
 *
 * @ingroup content_entity_example
 */
class ContactForm extends ContentEntityForm {


  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    /* @var $entity \Drupal\content_entity_example\Entity\Contact */
    $form = parent::buildForm($form, $form_state);
    $entity = $this->entity;

    $form['langcode'] = array(
      '#title' => $this->t('Language'),
      '#type' => 'language_select',
      '#default_value' => $entity->getUntranslated()->language()->getId(),
      '#languages' => Language::STATE_ALL,
    );
    return $form;
  }


  public function validateForm(array &$form, FormStateInterface $form_state) {
    parent::validateForm($form, $form_state);
    //Here we take important fields for validate information its
    $name =$form_state->getValue('name')[0]['value'];
    $name_patern = preg_match("/^[a-zA-Z0-9А-Яа-яїЇіІ_ -'.]+[a-zA-Z0-9А-Яа-яїЇіІ_ -'.]$/u", $name);
    if (iconv_strlen($name) < 2 || iconv_strlen($name) > 100 || !$name_patern) {
      $form_state->setErrorByName('name', $this->t('Ім\'я має містити лише букви та цифри від 2 до 100 символів'));
    }
    $text = $this->cleanFormText($form_state->getValue('text')[0]['value']);
    $reg = "/^[a-zA-Z0-9А-Яа-яїЇіІ_ -'.,@?!–();\n\r\t]+[a-zA-Z0-9А-Яа-яїЇіІ_ -'.,@?!–();\n\r\t]$/u";
    $text_patern = preg_match($reg, $text);
    if (!$text_patern) {
      $form_state->setErrorByName('text', $this->t('Текст має містити лише букви та цифри'));
    }
    $tell = $form_state->getValue('tell')[0]['value'];
    $pattern = preg_match("/^[0-9]{10}$/", $tell);
    if (!$pattern) {
      $form_state->setErrorByName('tell', $this->t('Телефон має містити тільки цифри, довжиною 10 символів'));
    }
    $mail         = $form_state->getValue('email')[0]['value'];
    $pattern_mail = preg_match("/[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-zA-Z0-9]+/", $mail);
    if (!$pattern_mail) {
      $form_state->setErrorByName('mail', $this->t("Вказана адреса е-пошти не є коректною."));
    }

  }

  /**
* {@inheritdoc}
*/
protected function actions(array $form, FormStateInterface $form_state) {
  parent::actions($form, $form_state); // TODO: Change the autogenerated stub
  //Here we rewrites "submit" for add Ajax function
  $actions['submit'] = [
    '#type' => 'submit',
    '#value' => $this->t('Save'),
    '#submit' => ['::submitForm', '::save'],
    '#ajax' => [
      'callback' => '::ajaxSubmitCallback',
      'event' => 'click',
    ],
  ];

  return $actions;
}
  /**
   * Ajax callback to display errors, or add a comment and refresh the page.
   *
   * @return \Drupal\Core\Ajax\AjaxResponse
   *   An ajax response object.
   */
  public function ajaxSubmitCallback(array &$form, FormStateInterface $form_state) {
    $ajax_response = new AjaxResponse();
    $message = [
      '#theme' => 'status_messages',
      '#message_list' => drupal_get_messages(),
      '#status_headings' => [
        'error' => t('Error message'),
        'warning' => t('Warning message'),
      ],
    ];
    $messages = \Drupal::service('renderer')->render($message);

    // We check the workspace, add or edit. And then print right message.
    $is_edit = \Drupal::routeMatch()->getParameter('content_entity_example_contact');
    if ($is_edit != NULL) {
      $edit_id = $is_edit->id();
      $link = "content_entity_example_contact/{$edit_id}/edit";
      $edits = strstr($_SERVER['REQUEST_URI'], $link);
    } else {
      $edits = false;
    }

    if ($form_state->hasAnyErrors()) {
      // Print to screen all errors
      $ajax_response->addCommand(new HtmlCommand('#form-system-messages', $messages));
    }
    else {
      // Print success messages
      $ajax_response->addCommand(new HtmlCommand('#form-system-messages', $messages));
      // Run ajax redirect
      $url = Url::fromRoute('entity.content_entity_example_contact.ent');
      $command = new RedirectCommand($url->toString());
      $ajax_response->addCommand($command);

      if ($edits == false) {
        \Drupal::messenger()->addMessage("Дякуємо за ваш коментар!", 'status');
      } else {
        \Drupal::messenger()->addMessage("Коментар відредаговано!", 'status');
      }

    }

    return $ajax_response;

  }

  /**
   * Clears the comment text of unwanted characters.
   *
   * @param string $value
   *
   * @return string
   *    Clean text.
   */
  // Here we cut text of review for check clean strings
  public function cleanFormText($value = "") {
    $value = trim($value);
    $value = stripslashes($value);
    $value = strip_tags($value);
    $value = htmlspecialchars($value);

    return $value;
  }
}
